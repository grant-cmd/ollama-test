name: Ollama MCP Server with Ngrok (Debug Version)

on:
  workflow_dispatch:

jobs:
  setup-ollama-with-ngrok:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget jq

    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        echo "Ollama installed successfully"

    - name: Stop any existing Ollama processes
      run: |
        pkill -f ollama || true
        sleep 2

    - name: Create Ollama directory structure
      run: |
        mkdir -p ~/.ollama/logs
        touch ~/.ollama/logs/server.log
        echo "Ollama directory structure created"

    - name: Start Ollama with MCP enabled
      env:
        OLLAMA_MCP_ENABLE: "true"
      run: |
        # Start Ollama with explicit logging
        ollama serve > ~/.ollama/logs/server.log 2>&1 &
        echo "Ollama started with PID: $!"
        sleep 10
        
        # Verify Ollama is running
        if curl -s http://localhost:11434/api/tags >/dev/null; then
          echo "‚úÖ Ollama server is running and responsive"
          echo "Ollama logs:"
          cat ~/.ollama/logs/server.log
        else
          echo "‚ùå Ollama server failed to start"
          cat ~/.ollama/logs/server.log
          exit 1
        fi

    - name: Pull model
      env:
        OLLAMA_MCP_ENABLE: "true"
      run: |
        ollama pull mistral
        echo "Model pulled successfully"

    - name: Install ngrok
      run: |
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xzf ngrok-v3-stable-linux-amd64.tgz
        sudo mv ngrok /usr/local/bin/
        ngrok --version

    - name: Setup ngrok authentication
      run: |
        ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        echo "Ngrok authtoken configured"

    - name: Start ngrok tunnel
      run: |
        # Start ngrok with more verbose logging
        ngrok http 11434 --log=stdout > ngrok.log 2>&1 &
        echo "Ngrok started with PID: $!"
        sleep 10
        
        # Get ngrok public URL
        NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        echo "Ngrok Public URL: $NGROK_URL"
        echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
        
        # Test basic connection
        if curl -s "$NGROK_URL/api/tags" >/dev/null; then
          echo "‚úÖ Ngrok tunnel is working correctly"
        else
          echo "‚ùå Ngrok tunnel test failed"
          echo "Ngrok logs:"
          cat ngrok.log
          exit 1
        fi

    - name: Test Ollama through ngrok
      run: |
        echo "Testing Ollama API through ngrok..."
        
        # Test with correct endpoint and headers
        response=$(curl -s -w "\n%{http_code}" \
          -X POST "$NGROK_URL/api/generate" \
          -H "Content-Type: application/json" \
          -H "User-Agent: Ollama-Test" \
          -d '{"model": "mistral", "prompt": "Hello", "stream": false}')
        
        http_code=$(echo "$response" | tail -n1)
        response_body=$(echo "$response" | sed '$d')
        
        echo "HTTP Response Code: $http_code"
        echo "Response Body: $response_body"
        
        if [ "$http_code" -eq 200 ]; then
          echo "‚úÖ Ollama API test successful"
        else
          echo "‚ùå Ollama API test failed with HTTP $http_code"
          echo "Ngrok logs:"
          cat ngrok.log
          echo "Ollama logs:"
          cat ~/.ollama/logs/server.log
          exit 1
        fi

    - name: Monitor connections
      run: |
        echo "=== Active Connections ==="
        echo "Ollama processes:"
        ps aux | grep ollama | grep -v grep
        echo ""
        echo "Ngrok processes:"
        ps aux | grep ngrok | grep -v grep
        echo ""
        echo "Open ports:"
        netstat -tlnp
        echo ""
        echo "=== ================= ==="

    - name: Keep server running for testing
      run: |
        echo "üöÄ Server is running!"
        echo "Public URL: $NGROK_URL"
        echo "Test with: curl -X POST $NGROK_URL/api/generate -H 'Content-Type: application/json' -d '{\"model\": \"mistral\", \"prompt\": \"Hello\"}'"
        echo ""
        echo "‚è∞ Keeping server running for 10 minutes..."
        sleep 600
