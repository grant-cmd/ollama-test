name: Ollama MCP Server with Ngrok (Foreground with Logs)

on:
  workflow_dispatch:  # Manual trigger

jobs:
  setup-ollama-with-ngrok:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check system resources
      run: |
        echo "=== SYSTEM RESOURCES ==="
        echo "CPU cores: $(nproc)"
        free -h
        df -h
        echo "=== =============== ==="

    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        echo "Ollama installed successfully"

    - name: Stop any existing Ollama processes
      run: |
        # Stop Ollama systemd service if exists
        sudo systemctl stop ollama.service 2>/dev/null || true
        
        # Kill any running Ollama processes
        pkill -f "ollama serve" 2>/dev/null || true
        pkill -f ollama 2>/dev/null || true
        
        # Verify no Ollama processes are running
        if pgrep ollama >/dev/null; then
          echo "Warning: Some Ollama processes still running"
          ps aux | grep ollama
        else
          echo "Ollama processes stopped successfully"
        fi

    - name: Install ngrok
      run: |
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xzf ngrok-v3-stable-linux-amd64.tgz
        sudo mv ngrok /usr/local/bin/
        ngrok --version

    - name: Setup ngrok authentication
      run: |
        ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        echo "Ngrok authtoken configured"

    - name: Start Ollama with MCP enabled in foreground
      env:
        OLLAMA_MCP_ENABLE: "true"  # Enable MCP support
      run: |
        echo "Starting Ollama server with MCP enabled..."
        # Start Ollama in foreground with verbose output
        ollama serve &
        OLLAMA_PID=$!
        echo "Ollama started with PID: $OLLAMA_PID"
        
        # Wait a moment for server to initialize
        sleep 5
        
        # Verify Ollama is running
        if curl -s http://localhost:11434/api/tags >/dev/null; then
          echo "✅ Ollama server is running and responsive"
        else
          echo "❌ Ollama server failed to start"
          exit 1
        fi

    - name: Pull model
      env:
        OLLAMA_MCP_ENABLE: "true"
      run: |
        ollama pull deepseek-coder:6.7b
        echo "Model pulled successfully"

    - name: Start ngrok tunnel and test connection
      run: |
        # Start ngrok in background
        ngrok http 11434 --log=stdout > ngrok.log 2>&1 &
        NGROK_PID=$!
        echo "Ngrok started with PID: $NGROK_PID"
        
        # Wait for ngrok to initialize
        sleep 10
        
        # Get ngrok public URL
        NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        echo "Ngrok Public URL: $NGROK_URL"
        echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
        
        # Test connection through ngrok
        echo "Testing connection through ngrok..."
        if curl -s "$NGROK_URL/api/tags" >/dev/null; then
          echo "✅ Ngrok tunnel is working correctly"
        else
          echo "❌ Ngrok tunnel test failed"
          echo "Ngrok logs:"
          cat ngrok.log
          exit 1
        fi

    - name: Monitor Ollama logs in real-time
      run: |
        echo "=== Monitoring Ollama logs ==="
        echo "Ollama logs will be displayed here for 60 seconds..."
        echo "Send requests to: $NGROK_URL"
        echo "Press Ctrl+C to continue workflow after testing"
        
        # Display Ollama logs for monitoring
        timeout 60s tail -f ~/.ollama/logs/server.log || true

    - name: Test complete workflow
      run: |
        echo "=== Testing Complete Workflow ==="
        echo "Testing API endpoint through ngrok..."
        
        # Test generate endpoint
        curl -X POST "$NGROK_URL/api/generate" \
          -H "Content-Type: application/json" \
          -d '{"model": "deepseek-coder", "prompt": "Hello", "stream": false}' \
          -w "\nResponse Code: %{http_code}\n"
        
        echo "Test completed successfully"

    - name: Show connection details
      run: |
        echo "=== CONNECTION DETAILS ==="
        echo "Public Ngrok URL: $NGROK_URL"
        echo "Local Ollama URL: http://localhost:11434"
        echo "MCP Enabled: true"
        echo "=========================="
        
        # Show ngrok inspection interface info
        echo "For detailed request inspection, visit: http://localhost:4040"
        echo "Use this for testing: curl -X POST $NGROK_URL/api/generate -H 'Content-Type: application/json' -d '{\"model\": \"mistral\", \"prompt\": \"Hello\"}'"

    - name: Keep server running for testing (optional)
      if: always()
      run: |
        echo "Server is running. Press Ctrl+C to stop or wait for timeout."
        # Keep the workflow running for 10 minutes for testing
        sleep 18000
